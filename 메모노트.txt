221111
1. 깃허브 가입
2. 토큰 발급 (vscode) 해당 계정으로 승인하고 사용가능.
3. 해당 터미널에 아이디 및 이메일 등록.
PS C:\Web_Workspace1> git config --global user.name lsy3709
PS C:\Web_Workspace1> git config --global user.email lsy3709@naver.com
4. 왼쪽 하단에 사용자 아이콘 클릭.
5. 설정 동기화 등에서 -> 해당 깃허브 계정 연결.
6. 내부 vscode 연동하는 부분 참고하기.
7. git remote add origin https://github.com/lsy3709/Web_Workspace1.git
8. git pull origin master
9. git push -u origin master

중간 실습1)
폴더를 하나 더 로컬 (자기 컴퓨터) 만들어서,
본인 원격 저장소 주소를 복붙헤서, 연동 합니다.

7. git remote add origin https://github.com/pyj9307/work221117.git
8. git pull origin master - git에서 가져오기
9. git push -u origin master - git으로 보내기

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
깃허브 토큰

221114
. 닷 연산자.
해당 객체 하위에 폴더처럼 . 
(패키지)부모폴더.자식폴더 개념

221115 데이터베이스

DB란 데이터를 저장을 하는 곳

프론트엔드(HTML(뼈대)/CSS(디자인)/JS(이벤트)/REACT)/백엔드(JAVA/JSP(유지보수)/SPRING(최신기술,앱개발 등을 위해))/ANSI SQL

DB 큰 회사 프로그램 
ORACLE(리눅스가능)/MS SQL(기본적으로 WINDOW에서만 돌아감+MS서버 또 사야됨)/MY SQL(현재 오라클에 인수됨, 살짝 상업됨)/MARIA DB(MY SQL이랑 같음, 완전무료)
ANSI SQL 가능, 자체 SQL 있지만 쓰면 호환성이 부족
서버는 365일 돌아야 함.

MYSQL 명령어
mysql 들어가기
cd 주소입력(C:\Program Files\MySQL\MySQL Server 8.0\bin)
MYSQL 접속 
mysql -u 계정명(root 관리자계정) -p (기본 로그인)
mysql -u 계정명 -h 서버주소 -p (다른 서버로 접속)
mysql -u 계정명 -h 서버주소 -p 포트번호 -p (다른 서버의 다른 포트로 접속)

포트란? 인터넷 회선의 개념.

database 목록 확인
show database;

data table 목록 확인
show table;

지정한 database 사용
use 데이터베이스명;

localhost 컴퓨터 자신을 뜻하는 DNS 주소(IP주소로 127.0.0.1)

% : mysql의 계정정보에서 host 부분에 %로 표시되어 있으면 모든 곳에서 접속이 가능

사용자 생성
create user '계정명';
create user '계정명'@'접속주소'; (접속할 수 있는 ip주소를 제한하고 싶다면)
create user '계정명'@'접속주소' identified by '비밀번호'; (비번 만들려면 추가해야함)

사용자 삭제
drop user '계정명';
drop user '계정명'@'접속주소';

sql 명령어들은 길어서 엔터치고 계속쳐도 가능. 마지막에 ; 세미콜론 붙여야 끝남.

중간에 명령문 입력을 취소할 때 ctrl+c 누르면 끊김. 다시 입력 ㄱㄱ

데이터베이스 추가
create database 데이터베이스명;
create database '데이터베이스명';
create database 데이터베이스명 default character set utf8;
create database '데이터베이스명' default character set utf8;

문자셋이란?
컴퓨터에서 문자를 표시하기 위한 코드표, 현재는 유니코드인 utf8 방식이 표준으로 사용되고 있으나
예전 버전에는 문자셋이 기본이었기 때문에 utf8로 설정이 필요했음

유니코드 방식 
UTF-8 한글자에 3 byte(가변형)
UTF-16 한글자에 4 byte(고정)
UTF-32 한글자에 5 byte(고정)

데이터베이스 삭제
drop database 데이터베이스명;
데이터베이스 사용 권한 확인

show grants for '계정명'@'접속주소';

데이터베이스 사용 권한 설정
grant all privileges on 데이터베이스명.테이블명 to '계정명'@'접속주소';
grant all privileges on 데이터베이스명.*(전체테이블) to '계정명'@'접속주소';

데이터베이스 사용 권한 삭제
revoke all on 데이터베이스명.테이블명 from '계정명'@'접속주소';

명령어 즉시 적용
flush privileges;

비밀번호 변경
alter user '계정명'@'접속주소' identified with mysql_native_password by '비밀번호';

-- sql 명령어
-- ddl : 데이터 정의어, 데이터베이스 관리자가 사용, 데이터 베이스를 설계 및 생성하는 언어, (creare/drop/alter)
-- dml : 데이터 조작어, 일반 사용자/프로그램 개발자가 사용, 데이터베이스에 실제데이터를 추가, 삭제, 수정, 조회하기 위해 사용하는 언어, (select/insert/update/delete)
-- dcl : 데이터 관리어, 데이터 베이스 관리자가 사용, 데이터 베이스 사용 권한 및 소용자 권란 제어하기 위해 사용하는 언어, (grant/revoke 등)

-- select : 데이터를 조회하기 위한 명령어, where 구문을 함께 사용하여 조회 시 필요한 조건을 추가하여 데이터를 조회함
-- 사용법1 : select 컬럼명1, 컬럼명2, ... from 테이블명;
-- 사용법2 : select 컬럼명1, 컬럼명2, ... from 테이블명 where 조건;
select *(컬럼명) from employees(테이블명);
select emp_no, first_name, last_name, gender from employees;

select * from salaries;
select * from titles;

-- distinct : select 구문의 컬럼명과 함께 사용하는 명령어로 중복되는 데이터를 제거
select distinct title from titles;

-- where : 데이터 베이스에서 데이터를 조회할 때 조건을 추가하는 명령어, 조건에 만족하는 데이터만 출력함, select/update/delete 에서 사용됨
-- 사용법 : select 컬럼명1, 컬럼명2, === from 테이블명 where 검색조건;
-- update 테이블멸 set 컬럼명1, 컬럼명2, ... where 검색조건;
-- delete from 테이블명 where 검색조건;
select * from employees where first_name = 'mario';
select * from employees where gender = 'f';

-- and/or : where 구문을 사용하여 검색한 조건에 추가 조건을 사용하고자 할 경우 사용, and는 조건이 추가될 때마다 검색 정확도가 올라감, or는 조건이 추가될 때마다 검색되는 데이터의 양이 늘어남, where 구문의 추가하여 사용함
-- select 컬럼명1, 컬럼명2, ... from 테이블명 where 조건1 and 조건2 and 조건3 ...;
-- select 컬럼명1, 컬럼명2, ... from 테이블명 where 조건1 or 조건2 or 조건3 ...;
select*from employees where gender = 'm';
select*from employees where gender = 'm' and emp_no < 20000;
select*from employees where gender = 'm' and emp_no < 20000 and first_name = 'mario';

select*from employees where gender = 'm';
select*from employees where gender = 'm' or emp_no < 20000;
select*from employees where gender = 'm' or emp_no < 20000 or first_name = 'mario';

-- not : 검색 조건에 부합하지 않는 데이터를 출력
-- 사용법 : select 컬럼명1, 컬럼명2, ... from 테이블명 where not gender = 'm';
select * from employees where gender = 'm';
select * from employees where not gender = 'm';

-- order by : 지정한 컬럼을 기준으로 데이터를 정렬하여 출력, asc(오름차순), desc(내림차순), where 구문 마지막에 입력, 정렬할 컬럼은 여러개를 지정할 수 있음, 왼쪽부터 순차적으로 적용, 3개 이상 사용 시 원하는 형태로 정렬되지 않을 수 있음
-- 사용법 : select 컬럼명1, 컬럼명2, ... from 테이블명 where 검색조건 order by 컬럼명 asc/desc(정렬방식)

select * from employees;
select * from employees order by first_name asc;
select * from employees order by first_name desc;
select * from employees order by first_name desc, last_name asc;
select * from employees order by first_name desc, last_name asc, hire_date desc;

-- PK 기본 키, NN과 UQ가 자도으로 적용 됨, table 내에서 데이터를 구분하는 유일한 값(중복을 허용하지 않음)
-- NN(Not Null) 데이터가 없으면 오류가 남(빈 데이터를 지원하지 않음)
-- AI(Auto Increase) 자동 값 증가, INT(숫자 데이터)데이터 타입만 증가 됨, 문자는 안됨
-- UQ(Unique) 유일한 값, 중복을 허용하지 않지만 빈 칸은 가능

-- insert 데이터베이스에 데이터를 추가하는 명령어, 데이터 입력 시 컬럼의 순서는 상관없음(사용자가 입력한 컬럼 순서에 맞는 데이터만 입력하면 됨), ai/default로 설정된 데이터는 입력 시 컬럼을 생략해도 됨, not null로 설정된 부분만 정확하게 데이터를 입력하면 됨, unique로 설정된 키는 중복되는 데이터를 입력하면 안됨
-- 사용법1 : insert into 테이블몀 (컬럼명1, 컬럼명2, ...) values (데이터1, 데이터2, ...);
-- 사용법2 : insert into 테이블몀 (컬럼명1, 컬럼명2, ...) values (데이터1-1, 데이터1-2, ...), (데이터2-1, 데이터2-2, ...), ...;
insert into member (idx, mem_name, mem_phone, mem_email, mem_addr, mem_gender) values (1, '아이유', '01012345678', 'iu@bitc.co.kr', '부산광역시 부산진구 중앙대로', 'M');
insert into member (idx, mem_name, mem_phone, mem_email, mem_addr, mem_gender) values (2, '유인나', '01098765432', 'inna@bitc@co.kr', '부산진구 중앙대로', ''),
(3, '유재석', '01045672158', 'yjs@bitc@co.kr', '부산진구 전포대로', 'M'),
(4, '유아인', '01023647854', 'you@bitc@co.kr', '부산', 'M');
insert into member (mem_phone, mem_addr, mem_name, idx) values ('01078451236', '서울', '유병재', '5');

-- update 데이터베이스에 저장되어 있는 데이터를 수정하는 명령어

-- delete 데이터베이스에 저장되어 있는 데이터를 삭제하는 명령어


----------------------------221116
<script>
	자바 스크립트를 사용하기 위한 태그.
</script>

while 조건을 설정하고 조건이 만족하면 반복을 진행하는 태그
while(조건) {반복문}

코딩에서 = 은 오른쪽 값을 왼쪽으로 할당한다는 뜻
 a = b a를 b로 바꿈(할당)
 
 
-----------------------------221202 자바 3교시
클래스(붕어빵 틀)와 객체(붕어빵)
개념
1) 수납도구 -> 변수, 메서드(함수:기능) 등이 있다.(정리되어 있다.)
2) 설계도면 -> 붕어빵 예제(붕어빵 틀)
자바 OOP : 객체를 지향하는 프로그래밍의 약자
Object Orientatuin Programing

클래스에서 메인 메서드를 포함해서 만들었다면,
이제는 설계도로써 메인 메서드가 없이 만들어서 활용.

상속, 추상화, 캡슐화, 인터페이스, 추상클래스
-> 재사용을 어떻게 효율적으로 할것인가? 고민.

중복제거 -> 함수화, 객체화로 작업을 했습니다. 파일로 분리 작업도 해봤음.


------------------------221207 자바 1교시

앞 시간에 기억나는 걸 생각해보기.

클래스 -> 붕어빵 틀, 붕어빵 -> 객체 생성(인스턴스) 메모리 주소값 이야기.
객체 -> 1) 수납도구 2) 설계도구 3) 주소값
생성자 -> 멤버 변수 초기화
Person : ㅡㄹ래스
객체 하나 만들어보자
Person p1 = new Person();
p1 : 참조형 변수에 뭐가 할당되죠? 메모리 주소값이 할당.
p1 : 객체라고 부르고, 인스턴스
포인터
p1.name : 직접 데이더테 접근이 가능합니다.
접근 지정자 : private -> 직접 접근 안됨(이유? 안보임)
set/get 메서드를 만들었음.
반자동으로, IDE의 기능을 빌려 사용해서 만들었음.

p1.getName();
p1.setName("lsy");

기본생성자 : 시스템(JVM)이 알아서 만들어준다. (단, 생성자가 하나도 없을 경우)
생성자 모양이 다른 부분 : 오버로드, 짐(매개변수 비유)
Person() - 기본 생성자라고 하면
Person(String name, int age) - 오버로드라고 함

변수 -> 기본형 데이터 타입, 참조형 데이터 타입에 대해서 더 공부.
인스턴스 변수, 클래스 변수(static : 공유자원)
공유자원(static) 접근 시 가급적 인스턴스(객체)를 사용하지 말고 클래스 명으로 접근해주세요.(이유? 메모리 중복 할당 방지)
인스턴스로 접근하게 되면 객체를 하나 더 생성해서 스택이 쌓이기 때문에 메모리가 할당된다. 클래스로 부르면 그냥 넘어감.

변수를 선언하는 부분.
기본형 변수
int i;
값 할당
i = 10;
같이 할 수 있다
int i2 = 10;

참조형 변수로
선언만
Persin p1;
할당
p1 = new Person();
동시에
Person p2 = new Person();

--------------------------------221208 자바
클래스 -> 객체 생성자
VipCustomer extend Customer // 상속 관계, 부모 클래스 -> 자식 클래스
// 자식이 부모꺼를 사용하려면 먼저 부모에 있는 거부터 초기화를 해야한다.(생성자 호출 : super())
Customer lsy = new Customer(); // 참조형 변수 lsy, 실제 값이 아니라 주소값이 들어간다.
Customer lsy;
lsy  = new Customer();
VipCustomer lsy2 - new VipCustomer();

배열
여러 데이터를 담는 그릇 : 배열, 담을 수 있는 크기가 고정.
ArrayList : 여러 데이터를 담는 그릇 : 배열, 담을 수 있는 크기가 고정이 아님. 가변적
기본형 vs 참조형(변수에 주소값을 담는다.)

제너릭 -> <Customer> : Customer형만 담을 수 있다.

Protected : 외부에서 안보이고 자식에서만 보인다.

다형성
VipCustomer lsy2 = new VipCustomer();
Customer lsy3 = new VipCustomer();
lsy3. : 점을 찍으면 Customer(부모)꺼가 보인다.
VipCustomer lsy4 = (VipCustomer) lsy3;
다시 원래의 형으로 복귀를 해서, VipCustomer(자식)의 멤버가 보인다.

가상메서드
오버로드 : 생성자, 메서드의 이름은 같지만 매개변수의 형식이 달랐다. 각각 다르게 취급.
오버라이딩 : 덮어쓰기, 재정의. 메서드 이름은 같짐나 안에 기능을 다르게 정의해서 사용한다.


----------------------------------------20221209

추상클래스
: 추상 메서드를 가지고 있다면,
추상(막연하다, 구체적이지 않다.) vs 구체적인
abstract

추상클래스를  상속받는다면 : 
자식클래스는 뭔가 특징이 있다.
1) 추상메서드를 구체적으로 재정의
2) 자기가 추상클래스가 되거나

상속 -> 재사용 -> 단일 사용만 가능
is A 관계. 사람은 동물이다, 사람은 포유류이다
상속이 안된다면, 포함 관계 has A 관계를 사용한다. 많이 씀.
ex) A 클래스에 B클래스를 가져와서 사용한다.
클래스를 사용한다고 하면 -> 객체를 사용합니다.

Person p1;  -> 참조형 변수만 선언
p1 = new Person();

다형성
자식클래스는 부모 형으로 받는다. (부모를 상속한 모든 자식들은 부모형으로 선언가능)
인터페이스도 마찬가지.
인터페이스를 구현한 모든 클래스들은 그 인터페이스 형으로 선언 가능.

추상클래스
-> 직접 객체 생성도 안되고 하지만, 개발 설계 모델 클래스처럼 사용함.
-> 추상 메서드는 강제성(막연한 메서드 바로 사용못함) 그래서 재정의가 필요함.

인터페이스 -> 메서드 색인(목차), 유연성, 확장성, 다중 구현, 분업화
기본구성 : 상수, 추상메서드
추가로, 디폴트 메서드, private 메서드 추가(일반메서드)

-------------------------------------------221214
Object : 최고 상위 클래스
여기서 정의된 메서드들은 대부분 주소값으로 작업을 해서
우리가 하는 작업과 맞지 않다.
실제 데이터를 처리하는 작업을 많이해서, 기존의 메서드들을 그대로 사용 안하고,
재정의 사용한다.

컬렉션 -> 여러 데이터(객체)를 감는 그릇.
ArrayList -> 배열 업그레이드, 순서있고, 중복 가능.
set -> 순서 없고, 중복 불가능
map -> key : value 형태로 저장. key 값을 기준으로 정렬 가능
Tree(부모노드, 자식노드, 정렬: 오름차순, 내림차순) vs Hash(특정 값, 테이블로 저장)
ArrayList, map 중요

제너릭 -> 담는 종류를 제한(특정 범위제한). <>

13장 내부클래스 -> 익명 내부 클래스(이름 없는 클래스) : 이름이 없어서 호출이 안됨, 부르고 싶어도 못불러요. 그럼 어떻게 하냐? 일회성으로 사용을 합니다.
예) 이벤트 핸들러(버튼을 클릭했을 때 동작하는 작업, 자바 이후~계속 사용.)
, 람다식
(화살표 함수(메서드), 메서드를 간단하게 정의해서 사용, 오래전부터 사용하고 있음, 프로그래밍 기반이 다 수학)
, 스트림
((1)특정 데이터 선택, (2)정렬, (3)출력) 기본적으로 사용되는 메서드들을 편하게 모아놓았다. 특정 기능의 즐겨찾기(템플릿 메서드)


-------------------------------------------------221215
14장 예외처리
비정상적인 종료를 막기위해서 한다.

기본문법
try ~ catch
try : 실험장. 예외가 발생할 수 있다.
catch : 예외를 잡아서 처리를 하는 구조.

추가되는 부분
finally : 예외가 발생하건 안하건 상관없이 항상 실행이 되는 부분만
(주로 사용 하는 예 : 자원 반납(파일을 읽을 때도 객체가 필요, 해당 DB서버에 연결하기 위해서 특정 객체가 필요합니다. 결론, 모두 객체를 사용한다는 말은 자원을 이용한다는 뜻(메모리), 사용 후에, 반드시 해당 메모리를 반납을 합니다) -> close() 메서드를 호출해서 사용.

자동 종료가 가능한 : try with resource
인터페이스, Autocloseable을 구현하면 자동으로 종료가 됩니다.
close() 메서드가 자동 호출됨.

throws(예외를 미루기) throw(강제 예외 발생)

예외에서도 클래스 다이어그램으로 부모, 자식 관계가 있다는 점.
우리는 Exception 부분을 공부를 한다.

파일 입출력 사용할 때, 반드시 의무적으로 예외처리를 해달라고 한다(컴파일러가).


-----------------------221216
자리의 방화벽의 포트 여는 방법
1. 윈도우 창 오른쪽 하단에 네트워크 아이콘 우클릭

2. 윈도우 방화벽 클릭.

3. 고급설정

4. 보안 경고창 물어보면 예외

5. 인바운드 규칙 클릭
(들어오는 통신을 검사하는 항목)

6. 인바운드 규칙 우클릭 -> 새규칙 클릭했을

7. 포트 선택. 다음 클릭

8. TCP 선택, 특정 포트 : 11223 입력 다음

9. 연결 허용 체크 다음 클릭했을

10. 도메인, 개인, 공용 전체 다 체크 후 다음 클릭

11. 이름 : 간단히 포트 11223 허용 -> 마침




만약에 임포트에서 awt 오류가 발생하면




